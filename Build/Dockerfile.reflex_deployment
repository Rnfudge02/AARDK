#Copyright [2025] [Robert Fudge]
#SPDX-FileCopyrightText: Â© 2025 Robert Fudge <rnfudge@mun.ca>
#SPDX-License-Identifier: {Apache-2.0}

#As of Isaac ROS 3.2, the following packages are configured in base for both architectures
#TensorRT, LibNVInfer V10
#CUDA Toolktit V12.6
#Pytorch for CUDA V2.5.0

#Torchvision and TorchAudio are not installed on the arm64 base image

#Build Issac ROS Image
#https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common/blob/main/
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

#Maintainer label
LABEL maintainer="Robert Fudge <rnfudge@mun.ca>"
LABEL version="3.0.0"

ARG USERNAME=container-user
ARG USER_UID=1000
ARG USER_GID=1000
ARG PLATFORM=amd64

#Set user and home environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV USER=${USERNAME}
ENV HOME=/home/${USER}

#Downgrade to Pytorch 2.3.0 - Installing as system packages
RUN if [[ ${PLATFORM} == "arm64" ]] ; then \
    pip3 uninstall -y torch && \
    wget https://nvidia.box.com/shared/static/zvultzsmd4iuheykxy17s4l2n91ylpl8.whl && \
    wget https://nvidia.box.com/shared/static/9si945yrzesspmg9up4ys380lqxjylc3.whl && \
    wget https://nvidia.box.com/shared/static/u0ziu01c0kyji4zz3gxam79181nebylf.whl && \
    mv ./zvultzsmd4iuheykxy17s4l2n91ylpl8.whl /torch-2.3.0-cp310-cp310-linux_aarch64.whl && \
    mv ./9si945yrzesspmg9up4ys380lqxjylc3.whl /torchaudio-2.3.0+952ea74-cp310-cp310-linux_aarch64.whl && \
    mv ./u0ziu01c0kyji4zz3gxam79181nebylf.whl /torchvision-0.18.0a0+6043bc2-cp310-cp310-linux_aarch64.whl && \
    pip3 install --no-cache-dir /torch-2.3.0-cp310-cp310-linux_aarch64.whl && \
    pip3 install --no-cache-dir /torchaudio-2.3.0+952ea74-cp310-cp310-linux_aarch64.whl && \
    pip3 install --no-cache-dir /torchvision-0.18.0a0+6043bc2-cp310-cp310-linux_aarch64.whl \
    && rm -rf /torch-2.3.0-cp310-cp310-linux_aarch64.whl /torchvision-0.18.0a0+6043bc2-cp310-cp310-linux_aarch64.whl; \
fi

USER ${USER}
WORKDIR ${HOME}/ros_ws/src

#Ensure other needed ROS2 packages are installed
RUN --mount=type=cache,target=/var/cache/apt sudo apt update && sudo apt install -y python3-rosdep \
    python3-rosinstall-generator python3-vcstool python3-rosinstall python3-sphinx build-essential \
    ros-${ROS_DISTRO}-foxglove-bridge python3-sphinx ros-${ROS_DISTRO}-camera-calibration \
    ros-${ROS_DISTRO}-usb-cam gdb doxygen && \
if [[ ${PLATFORM} == "arm64" ]] ; then \
    sudo apt install -y nvidia-cuda-dev; \
fi


RUN pip3 install --no-cache-dir --no-dependencies git+https://github.com/ultralytics/ultralytics.git@main \
    py_cpuinfo nets onnxslim seaborn && \
if [[ ${PLATFORM} == "amd64" ]]; then \
    python3 -m pip install onnxruntime-gpu tensorrt==10.3.0; \
else \
    mkdir -p ${HOME}/opt && \
    wget https://nvidia.box.com/shared/static/6l0u97rj80ifwkk8rqbzj1try89fk26z.whl && \
    mv ./6l0u97rj80ifwkk8rqbzj1try89fk26z.whl ${HOME}/opt/onnxruntime_gpu-1.19.0-cp310-cp310-linux_aarch64.whl && \
    pip3 install --no-cache-dir ${HOME}/opt/onnxruntime_gpu-1.19.0-cp310-cp310-linux_aarch64.whl && \
    rm -rf ${HOME}/opt/onnxruntime_gpu-1.19.0-cp310-cp310-linux_aarch64.whl; \
fi

WORKDIR ${HOME}/ros_ws

#Clone and configure the OpenPose repo
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose && cd openpose\scripts\ubuntu &&\
chmod +x install_deps.sh && sudo ./install_deps.sh

#Install Torch2TRT and needed dependences for TRTPose
RUN git clone https://github.com/NVIDIA-AI-IOT/torch2trt && cd torch2trt && sudo python3 setup.py install --plugins && \
sudo pip3 install tqdm cython pycocotools && sudo apt-get install python3-matplotlib

#Install TRTPose


#Install prerequisites using rosdep
RUN pip3 install -U --no-cache-dir transforms3d && sudo apt update && rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y

#Build ROS2 drivers
RUN source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --parallel-workers $(nproc) \
    --symlink-install --event-handlers console_direct+ --base-paths src --cmake-args \
    ' -DCMAKE_BUILD_TYPE=Release' ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' \
    ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"' ' --no-warn-unused-cli'

ENTRYPOINT [ "/entrypoint.sh" ]